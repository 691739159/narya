    /**
     * Requests that the specified entry be added to the
     * <code>$field</code> set. The set will not change until the event is
     * actually propagated through the system.
     */
    public void addTo$upfield (DSet.Entry elem)
    {
        requestEntryAdd($capfield, $field, elem);
    }

    /**
     * Requests that the entry matching the supplied key be removed from
     * the <code>$field</code> set. The set will not change until the
     * event is actually propagated through the system.
     */
    public void removeFrom$upfield (Comparable key)
    {
        requestEntryRemove($capfield, $field, key);
    }

    /**
     * Requests that the specified entry be updated in the
     * <code>$field</code> set. The set will not change until the event is
     * actually propagated through the system.
     */
    public void update$upfield (DSet.Entry elem)
    {
        requestEntryUpdate($capfield, $field, elem);
    }

    /**
     * Requests that the <code>$field</code> field be set to the
     * specified value. Generally one only adds, updates and removes
     * entries of a distributed set, but certain situations call for a
     * complete replacement of the set value. The local value will be
     * updated immediately and an event will be propagated through the
     * system to notify all listeners that the attribute did
     * change. Proxied copies of this object (on clients) will apply the
     * value change when they received the attribute changed notification.
     */
    public void set$upfield ($type $field)
    {
        requestAttributeChange($capfield, $field, this.$field);
        this.$field = $field;
    }
