package $package {

#foreach ($import in $imports)
import $import;
#end

/**
 * Provides the implementation of the <code>${name}Service</code> interface
 * that marshalls the arguments and delivers the request to the provider
 * on the server. Also provides an implementation of the response listener
 * interfaces that marshall the response arguments and deliver them back
 * to the requesting client.
 */
public class ${name}Marshaller extends InvocationMarshaller
    implements ${name}Service
{
#foreach ($m in $methods)
#if ($velocityCount > 1)

#end
    /** The method id used to dispatch <code>$m.method.name</code> requests. */
    public static const $m.code :int = $velocityCount;

    // from interface ${name}Service
    public function $m.method.name ($m.getASArgList(true)) :void
    {
#foreach ($la in $m.listenerArgs)
#set ($argIdx = $la.index - 1)
        var listener$argIdx :$la.actionScriptMarshaller = new ${la.actionScriptMarshaller}();
        listener${argIdx}.listener = arg$argIdx;
#end
        sendRequest($m.code, [
            $m.getASWrappedArgList(true)
        ]);
    }
#end
}
}
