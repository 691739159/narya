<?xml version="1.0" standalone="yes"?>
<!-- build configuration -->
<project name="narya" default="compile" basedir=".">

  <!-- import overriding properties -->
  <property file="build.properties"/>

  <!-- configuration parameters -->
  <property name="lib.name"     value="narya"/>
  <property name="deploy.dir"   value="dist"/>
  <property name="savedoc.dir"  value="docs"/>
  <property name="javadoc.home" value="${deploy.dir}/docs"/>
  <property name="classes.dir"  value="${deploy.dir}/classes"/>
  <property name="libs.dir"     value="lib"/>
  <import file="etc/libs-incl.xml"/>

  <!-- declare our classpath business -->
  <path id="classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
  </path>

  <!-- checks the availability of certain libraries -->
  <target name="check-available" depends="prepare">
    <available property="ehcache.present" classpathref="classpath"
     classname="net.sf.ehcache.CacheManager"/>
    <echo level="info" message="EHCache: ${ehcache.present}"/>
  </target>

  <!-- prepares the application directories -->
  <target name="prepare">
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/lib"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${javadoc.home}"/>
    <copy todir="${classes.dir}">
      <fileset dir="src/java" includes="**/*.properties"/>
      <fileset dir="src/java" includes="**/*.tmpl"/>
    </copy>
    <copy todir="${deploy.dir}/lib" flatten="true">
      <fileset refid="${lib.name}.libs"/>
    </copy>
  </target>

  <!-- makes sure our tools are compiled and defines the ant tasks -->
  <target name="preptools" depends="prepare">
    <javac srcdir="src/java" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="{$build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
      <include name="com/threerings/presents/tools/**"/>
    </javac>
    <taskdef resource="com/threerings/presents/tools.properties" classpathref="classpath"/>
  </target>

  <!-- cleans out the intermediate build files -->
  <target name="clean" depends="common-clean">
    <delete dir="${deploy.dir}/classes"/>
    <delete dir="${deploy.dir}/docs"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.swc"/></delete>
  </target>

  <!-- wipes the entire build directory clean -->
  <target name="distclean" depends="common-clean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- common clean tasks -->
  <target name="common-clean">
    <ant dir="tests" target="clean"/>
  </target>

  <!-- build the java class files -->
  <target name="compile" depends="prepare,check-available">
    <javac srcdir="src/java" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="{$build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
      <exclude name="com/threerings/presents/peer/server/EHCache*" unless="ehcache.present"/>
    </javac>
  </target>

  <!-- checks whether our Flash library needs building -->
  <target name="checkaslib">
    <condition property="no_build_aslib"><or>
      <not><available file="${flexsdk.dir}/lib/compc.jar"/></not>
      <and>
        <uptodate targetfile="${deploy.dir}/${lib.name}lib.swc">
          <srcfiles dir="src/as" includes="**/*.as"/>
        </uptodate>
        <uptodate targetfile="${deploy.dir}/player-env.swc">
          <srcfiles dir="src/player" includes="**/*.as"/>
        </uptodate>
        <uptodate targetfile="${deploy.dir}/thane-env.swc">
          <srcfiles dir="src/thane" includes="**/*.as"/>
        </uptodate>
      </and>
    </or></condition>
  </target>

  <!-- builds our Flash library -->
  <target name="aslib" unless="no_build_aslib" depends="checkaslib">
    <!-- Generate aslib-config.xml for Flash Player and general compilation -->
    <copy file="etc/aslib-config.xml.in" tofile="${deploy.dir}/aslib-config.xml">
      <filterset>
        <filter token="flex_sdk_dir" value="${flexsdk.dir}"/>
        <filter token="lib_name" value="${lib.name}"/>
      </filterset>
    </copy>
    <!-- Generate thane-config.xml for targetting Thane -->
    <copy file="etc/thane-config.xml.in" tofile="${deploy.dir}/thane-config.xml">
      <filterset>
        <filter token="flex_sdk_dir" value="${flexsdk.dir}"/>
        <filter token="extdep_suffix" value="${extdep.suffix}"/>
      </filterset>
    </copy>
    <!-- Build Environment.as for the Flash Player -->
    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${deploy.dir}/aslib-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=src/player/"/>
      <arg value="-include-sources=src/player/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/player-env.swc"/>
    </java>
    <!-- Build Environment.as for Thane -->
    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${deploy.dir}/thane-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=src/thane/"/>
      <arg value="-include-sources=src/thane/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/thane-env.swc"/>
    </java>
    <!-- Build Narya -->
    <java jar="${flexsdk.dir}/lib/compc.jar" fork="true" failonerror="true">
      <arg value="-load-config"/>
      <arg value="${deploy.dir}/aslib-config.xml"/>
      <arg value="-compiler.optimize"/>
      <arg value="-compiler.source-path=src/as/"/>
      <arg value="-compiler.external-library-path+=${deploy.dir}/player-env.swc"/>
      <arg value="-include-sources=src/as/"/>
      <arg value="-output"/>
      <arg value="${deploy.dir}/${lib.name}lib.swc"/>
    </java>
    <delete file="${deploy.dir}/aslib-config.xml"/>
    <delete file="${deploy.dir}/thane-config.xml"/>
  </target>

  <!-- build the native libraries -->
  <condition property="isunix"><os family="unix"/></condition>
  <target name="ninstall" depends="prepare" if="isunix">
    <echo level="info" message="Doing native compilation on ${os.name}..."/>
    <exec dir="src/java/com/threerings/util/signal/${os.name}" executable="make">
       <arg line="install"/>
    </exec>
  </target>

  <!-- build the javadoc documentation -->
  <target name="javadoc" depends="prepare">
    <javadoc sourcepath="src/java" packagenames="com.threerings.*"
             destdir="${javadoc.home}" stylesheetfile="docs/stylesheet.css"
             additionalparam="-breakiterator"
             link="http://www.threerings.net/code/narya/docs/api">
      <classpath refid="classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
      <!-- ant documentation is not available online, sorry kids -->
      <link href="file:///usr/share/doc/ant-doc/javadocs"/>
      <link href="http://samskivert.com/code/samskivert/samskivert/docs/api"/>
    </javadoc>
  </target>

  <!-- builds the javadocs and stuffs them in a directory where they -->
  <!-- won't be blown away when we do "clean" next time -->
  <target name="savedoc" depends="javadoc">
    <delete dir="${savedoc.dir}/api"/>
    <copy todir="${savedoc.dir}/api">
      <fileset dir="${javadoc.home}" includes="**/*"/>
    </copy>
  </target>

  <!-- builds the ActionScript documention -->
  <target name="asdoc" unless="no_build_aslib" depends="checkaslib">
    <mkdir dir="${deploy.dir}/asdocs"/>
    <java classpath="${flexsdk.dir}/lib/asdoc.jar" classname="flex2.tools.ASDoc" fork="true">
      <jvmarg value="-Xmx1024m"/>
      <jvmarg value="-Dsun.io.useCanonCashes=false"/>
      <jvmarg value="-Xbootclasspath/p:${flexsdk.dir}/asdoc/lib/xalan.jar"/>
      <arg value="+flexlib=${flexsdk.dir}/frameworks"/>
      <arg line="-library-path ${flexsdk.dir}/frameworks/libs"/>
      <arg line="-templates-path ${flexsdk.dir}/asdoc/templates"/>
      <arg line="-doc-sources src/as"/>
      <arg line="-doc-sources src/player"/>
      <arg line="-output ${deploy.dir}/asdocs"/>
    </java>
  </target>

  <!-- runs our tests -->
  <target name="tests">
    <ant dir="tests" target="tests"/>
  </target>

  <!-- a target for rebuilding everything -->
  <target name="all" depends="clean,prepare,compile,aslib,ninstall,javadoc,dist"/>

  <!-- builds our distribution files (war and jar) -->
  <target name="dist" depends="prepare,compile,procstream,aslib,ninstall">
    <!-- build our tests since that isn't otherwise normally done -->
    <ant dir="tests" target="compile"/>
    <!-- build our various jar files -->
    <jar destfile="${deploy.dir}/${lib.name}-base.jar">
      <fileset dir="${classes.dir}">
        <include name="com/threerings/NaryaLog**"/>
        <include name="com/threerings/io/**"/>
        <include name="com/threerings/util/**"/>
        <exclude name="com/threerings/**/tools/**"/>
        <exclude name="**/*.c,**/Makefile,**/*.h"/>
      </fileset>
    </jar>
    <jar destfile="${deploy.dir}/${lib.name}-distrib.jar">
      <fileset dir="${classes.dir}">
        <include name="com/threerings/presents/**"/>
        <include name="com/threerings/crowd/**"/>
        <include name="com/threerings/admin/**"/>
        <include name="com/threerings/bureau/**"/>
        <exclude name="com/threerings/**/tools/**"/>
        <exclude name="com/threerings/**/tools.properties"/>
        <exclude name="**/*.html,**/*.png"/>
      </fileset>
    </jar>
    <jar destfile="${deploy.dir}/${lib.name}-tools.jar">
      <fileset dir="${classes.dir}">
        <include name="com/threerings/io/**"/>
        <include name="com/threerings/presents/**"/>
        <include name="com/threerings/util/**"/>
      </fileset>
      <zipfileset src="${deploy.dir}/lib/samskivert.jar"/>
      <zipfileset src="${deploy.dir}/lib/velocity-1.5-dev.jar"/>
      <zipfileset src="${deploy.dir}/lib/javassist.jar"/>
      <zipfileset src="${deploy.dir}/lib/google-collect.jar"/>
    </jar>
    <jar destfile="${deploy.dir}/${lib.name}-tests.jar">
      <fileset dir="tests/${classes.dir}" includes="com/threerings/**"/>
    </jar>
  </target>

  <!-- generates fields for persistent record classes -->
  <target name="genrecord" depends="prepare">
    <taskdef name="grecord" classname="com.samskivert.depot.tools.GenRecordTask"
             classpathref="classpath"/>
    <!-- make sure the record class files are all compiled -->
    <javac srcdir="src/java" destdir="${classes.dir}" debug="on" optimize="${build.optimize}"
           deprecation="on" source="1.5" target="1.5">
      <classpath refid="classpath"/>
      <include name="**/*Record.java"/>
    </javac>
    <!-- now update the source files -->
    <grecord classpathref="classpath">
      <fileset dir="src/java" includes="**/*Record.java"/>
    </grecord>
  </target>

  <!-- generates additional methods for distributed object classes -->
  <target name="gendobj" depends="preptools"> 
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="src/java" destdir="${classes.dir}" includeAntRuntime="false" debug="on"
           optimize="${build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath refid="classpath"/>
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <gendobj classpathref="classpath">
      <fileset dir="src/java" includes="**/*Object.java"/>
    </gendobj>
  </target>

  <!-- generates marshaller and dispatcher classes for all invocation service declarations -->
  <target name="genservice" depends="preptools"> 
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="src/java" destdir="${classes.dir}" includeAntRuntime="false" debug="on"
           optimize="${build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath refid="classpath"/>
      <include name="**/*Service.java"/>
      <exclude name="**/InvocationService.java"/>
    </javac>
    <!-- now generate the associated files -->
    <genservice header="lib/SOURCE_HEADER" asroot="src/as" classpathref="classpath">
      <fileset dir="src/java" includes="**/*Service.java">
        <exclude name="**/InvocationService.java"/>
        <exclude name="**/peer/**"/>
        <exclude name="**/admin/**"/>
      </fileset>
      <providerless service="ChatService"/>
      <providerless service="SimulatorService"/>
      <providerless service="TimeBaseService"/>
    </genservice>
    <genservice header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="src/java" includes="**/peer/**/*Service.java"/>
      <fileset dir="src/java" includes="**/admin/**/*Service.java"/>
    </genservice>
  </target>

  <!-- generates sender and decoder classes for all invocation receiver declarations -->
  <target name="genreceiver" depends="preptools">
    <!-- make sure the receiver class files are all compiled -->
    <javac srcdir="src/java" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on" source="1.5" target="1.5">
      <classpath refid="classpath"/>
      <include name="**/*Receiver.java"/>
      <exclude name="**/InvocationReceiver.java"/>
    </javac>
    <!-- now generate the associated files -->
    <genreceiver header="lib/SOURCE_HEADER" classpathref="classpath">
      <fileset dir="src/java" includes="**/*Receiver.java"
        excludes="**/InvocationReceiver.java"/>
    </genreceiver>
  </target>

  <!-- adds readField and writeField methods to Stremable classes -->
  <target name="procstream" depends="preptools">
    <!-- now instrument the associated files -->
    <instream outdir="${classes.dir}">
      <path refid="classpath"/>
      <fileset dir="${classes.dir}" includes="**/data/*.class"/>
      <fileset dir="${classes.dir}" includes="**/net/*.class"/>
      <fileset dir="${classes.dir}" includes="**/dobj/*.class"/>
      <fileset dir="${classes.dir}" includes="**/util/*.class"/>
    </instream>
  </target>

  <!-- generates ActionScript versions of our Streamable classes -->
  <target name="genascript" depends="preptools">
    <genascript header="lib/SOURCE_HEADER" asroot="src/as">
      <fileset dir="src/java" includes="**/data/*.java"/>
    </genascript>
  </target>

  <!-- various bits used by the retroweaver tasks -->
  <property name="inpre" value="${deploy.dir}/${lib.name}"/>
  <property name="outpre" value="${deploy.dir}/retro/${lib.name}"/>

  <!-- a helper task for 'retro' -->
  <target name="vweave">
    <taskdef name="weave" classpathref="classpath"
             classname="com.rc.retroweaver.ant.RetroWeaverTask"/>
    <path id="retrocp">
      <pathelement location="/usr/local/jdk1.4/jre/lib/rt.jar"/>
      <fileset dir="lib" includes="**/*.jar"/>
      <fileset dir="${deploy.dir}/retro" includes="*.jar"/>
    </path>
    <weave inputjar="${inpre}-${which}.jar" outputjar="${outpre}-${which}.jar"
           failonerror="true">
      <classpath refid="retrocp"/>
    </weave>
  </target>

  <!-- converts our 1.5 code to a 1.4 compatible format -->
  <target name="retro" depends="dist">
    <taskdef name="weave" classpathref="classpath"
             classname="com.rc.retroweaver.ant.RetroWeaverTask"/>
    <mkdir dir="${deploy.dir}/retro"/>

    <!-- we weave everything a first time without verification so that -->
    <!-- interdependencies will resolve the second time -->
    <weave inputjar="${inpre}-base.jar" outputjar="${outpre}-base.jar"/>
    <weave inputjar="${inpre}-distrib.jar" outputjar="${outpre}-distrib.jar"/>

    <!-- now weave again with the verifier to check for unweavable 1.5isms -->
    <antcall target="vweave"><param name="which" value="base"/></antcall>
    <antcall target="vweave"><param name="which" value="distrib"/></antcall>
  </target>

  <!-- generate a class hierarchy diagram -->
  <target name="hierviz" depends="prepare,compile">
    <taskdef name="viztool" classname="com.samskivert.viztool.DriverTask"/>
    <viztool visualizer="com.samskivert.viztool.hierarchy.HierarchyVisualizer"
      pkgroot="com.threerings.miso" classes="com.threerings.miso.*"
      output="hierviz.ps">
      <classpath refid="classpath"/>
    </viztool>
  </target>

  <!-- generate a class hierarchy diagram -->
  <target name="sumgen" depends="prepare,compile">
    <taskdef name="viztool" classname="com.samskivert.viztool.DriverTask"/>
    <viztool visualizer="com.samskivert.viztool.summary.SummaryVisualizer"
      pkgroot="com.threerings.miso"
      classes="com.threerings.miso.*Scene.*"
      output="summary.ps">
      <classpath refid="base.classpath"/>
    </viztool>
  </target>

  <!-- creates a zipfile with our source distribution -->
  <target name="snapshot">
     <echo message="You may want to stop and run 'ant savedoc' first."/>
     <delete file="${deploy.dir}/${lib.name}-snapshot.zip"/>
     <mkdir dir="${deploy.dir}/snapshot/${lib.name}"/>
     <copy todir="${deploy.dir}/snapshot/${lib.name}">
       <fileset dir=".">
         <include name="**"/>
         <exclude name="dist/**"/>
         <exclude name="tests/dist/**"/>
         <exclude name="${lib.name}-*.zip"/>
       </fileset>
     </copy>
     <copy todir="${deploy.dir}/snapshot/${lib.name}/lib">
       <fileset dir="${deploy.dir}/lib" includes="*.jar"/>
     </copy>
     <copy todir="${deploy.dir}/snapshot/${lib.name}/docs/api">
       <fileset dir="${deploy.dir}/docs" includes="**"/>
     </copy>
     <zip destfile="${deploy.dir}/${lib.name}-snapshot.zip" basedir="${deploy.dir}/snapshot"/>
     <delete dir="${deploy.dir}/snapshot"/>
  </target>

</project>
