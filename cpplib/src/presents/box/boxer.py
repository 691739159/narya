primitives = [("Int", "int32", "Integer"),
        ("Short", "int16", "Short"),
        ("Byte", "int8", "Byte"),
        ("Boolean", "bool", "Boolean"),
        ("Double", "double", "Double"),
        ("Float", "float", "Float")]
for interpreter, cpptype, javatype in primitives:
    header = open("Boxed" + interpreter + ".h", 'w')
    header.write('''#pragma once
// Generated by running python boxer.py in this directory

#include "presents/Streamable.h"
#include "presents/streamers/StreamableStreamer.h"

namespace presents { namespace box {
    class Boxed%(interpreter)s : public Streamable{
    public:
        DECLARE_STREAMABLE();

        %(cpptype)s value;

        static Shared<Boxed%(interpreter)s> createShared (%(cpptype)s value)
        {
            Shared<Boxed%(interpreter)s> shared(new Boxed%(interpreter)s);
            shared->value = value;
            return shared;
        }

        virtual void readObject(ObjectInputStream& in);
        virtual void writeObject(ObjectOutputStream& out) const;
    };
}}''' % locals())
    header.close()
    impl = open("Boxed" + interpreter + ".cpp", "w")
    impl.write('''#include "presents/stable.h"
#include "Boxed%(interpreter)s.h"
#include "presents/ObjectInputStream.h"
#include "presents/ObjectOutputStream.h"
// Generated by running python boxer.py in this directory

using namespace presents::box;

DEFINE_STREAMABLE("java.lang.%(javatype)s", Boxed%(interpreter)s);

void Boxed%(interpreter)s::readObject (ObjectInputStream& in)
{
    value = in.read%(interpreter)s();
}

void Boxed%(interpreter)s::writeObject (ObjectOutputStream& out) const
{
    out.write%(interpreter)s(value);
}
''' % locals())
    impl.close()
